<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <title>PEONHQ - WebGL Runner</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link rel="stylesheet" href="/css/play.css" type="text/css" />
</head>

<body>
    <!-- A canvas for the engine, this will be resized if needed -->
    <div id="countdownElement" class="hide">X</div>
    <div id="doormat">
        <div class="playerContainer">
            <h1 id="player1">P1: .............</h1>
            <h1 id="player2">P2: ...waiting...</h1>
        </div>
        <button id="readyButton" data-is-ready="false" class="notReady">Ready!</button>
    </div>
    <div class="mainwrapper">
        <canvas id="mainCanvas" width="600" height="800"></canvas>
    </div>
    <!-- Include all the third party stuff -->
    <script type="text/javascript" src="/scripts/Lib/dat.gui.js"></script>
    <script type="text/javascript" src="/scripts/Lib/cannon.js"></script>
    <script type="text/javascript" src="/scripts/Lib/socket.io-1.2.0.js"></script>
    <script type="text/javascript" src="/scripts/Lib/babylon.1.14-dbg.js"></script>
    <script type="text/javascript" src="/scripts/Lib/oimo.js"></script>
    <script type="text/javascript" src="/scripts/Lib/StackBlur.js"></script>

    <!-- Penultimately the compilation result of my .TS files-->
    <script type="text/javascript" src="/scripts/Lib/compiled.js"></script>

    <!-- Finally the invocation of the game load -->
    <script>
        (function (params) {
            var socket = window.socket =  new io(<%- "'" + "/"+gameId + "'" %>);
            var game = window.game =  new GAME.GameWorld("mainCanvas", params, socket, "hard");

            document.getElementById("readyButton").onclick=function(){
                var isReady = this.dataset['isReady'] == "false";
                this.dataset['isReady'] = isReady;
                this.classList.remove("notReady");
                this.classList.remove("ready");
                if (isReady){
                    this.classList.add("ready");
                    this.textContent = "Wait, not ready";
                } else {
                    this.classList.add("notReady");
                    this.textContent = "Ready";
                }
                socket.emit("readyStateChanged", {isReady:isReady, timestamp:Date.now()});
            }

            socket.on("startGame",function(){
                document.getElementById("doormat").classList.add("hide");
                document.getElementById("countdownElement").classList.remove("hide");
            });

            window.onmessage = function(evt){
                if (evt.data.timeoutms){
                    var data= evt.data.timeoutms;
                    document.getElementById("countdownElement")
                        .textContent="Starting in "+(data/1000)+"s!";
                    if (data<1000){
                        document.getElementById("countdownElement").textContent="GO!";
                        document.getElementById("countdownElement").classList.add("hide");
                        setTimeout(function(){
                            document.getElementById("countdownElement").style.display="none";
                        },1000);
                    }
                } else if (evt.data.playerInfo){
                    var playerInfo = evt.data.playerInfo;
                    if (params.gameParameters.name==playerInfo.name){
                        document.getElementById("player1").textContent = "P1: " + playerInfo.name;
                    } else {
                        document.getElementById("player2").textContent = "P2: " + playerInfo.name;
                    }
                }
            }

            game.Load(params);

        })(<%- JSON.stringify({mapParameters:mapParams,gameParameters:gameParams}) %>);
    </script>
</body>
</html>